version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  prepare-aws-cli-profile: # Help install and configure AWS CLI 
    description: > 
      Prepare a aws cli profile variable for environment destruction with image that don't support AWS CLI
    parameters:
      installaws: 
        type: string
        default: "no"
    steps:
      - run:
          name: Install and configure AWS Profile
          command: |
            param=<<parameters.installaws>>          
            if [[ "$param" == "yes" ]]; then 
              sudo apt install -y python-pip
              pip install -U awscli
              aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
              aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
              aws configure set default.region ${AWS_DEFAULT_REGION}

              aws configure list
            fi

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      id: 
        type: string
      # Mask as bucket need to be empty first, or NOT. Otherwise, will lead to stack DELETE_FAILURE
      isEmpty: 
        type: enum
        default: "yes"
        enum: ["no", "yes"]
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-bend-<<parameters.id>> 
            isempty="<<parameters.isEmpty>>"
            if [[ "$isempty" == "no" ]]; then  
              aws s3 rm s3://udapeople-<<parameters.id>> --recursive
            fi
            aws cloudformation delete-stack --stack-name udapeople-fend-<<parameters.id>>
          
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id: 
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token:${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/migrations_<<parameters.id>> )
            
            if(( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi

  notify_job_fails_via_slack:
    parameters:
      job_name:
        type: string
      message:
        type: string
    steps:
      - slack/notify:
          channel: "DevOpsCommittee"
          mentions: '@Magido Maskate'
          message: ${<<parameters.message>>}
          event: fail


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd  frontend
            npm i
            npm run build
      - save_cache:
          paths: ['frontend/node_modules']
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            ls -a 
            npm i
            cat > .env \<< EOF
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./dist/migrations
            TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity.js
            TYPEORM_MIGRATIONS=./dist/migrations/*.js
            TYPEORM_HOST=${TYPEORM_HOST}
            TYPEORM_PORT=${TYPEORM_PORT}
            TYPEORM_USERNAME=${TYPEORM_USERNAME}
            TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
            TYPEORM_DATABASE=${TYPEORM_DATABASE}
            EOF
            npm run build
      - save_cache:
          paths: ["backend/node_modules" ]
          key: backend-build
      - persist_to_workspace:
          root: ~/
          paths: ["project/backend/.env"]
  
  test-frontend:
    docker:
      # Docker image here
    - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm install oauth-sign
            npm run test
      - save_cache:
          paths: ['frontend/node_modules']
          key: frontend-build  

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout      
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Testing backend
          command: |
            cd ./backend 
            npm run test
  
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Auditing frontend depenndencies
          command: |
            cd ./frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Auditing backend depenndencies
          command: |
            cd ./backend
            npm audit fix --audit-level=critical --force
            ls -a
            
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=CapStone03 \
              --stack-name "udapeople-bend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=CapStone03 \
              --stack-name "udapeople-fend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
            
      - run:
          name: Append back-end ip into ansible inventory
          command: |
            # Your code here
            cmd=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --output text)
            
            for dnsname in $cmd; do 
              echo $dnsname >> .circleci/ansible/inventory.txt; 
            done
            
            yum install -y tar gzip
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: ["project/.circleci/ansible/inventory.txt"]
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          isEmpty: "yes"

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python:latest
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ['4d:0b:29:64:e7:f8:19:f7:0a:76:80:38:8a:fe:be:b6']
      # attach workspace
      - attach_workspace:
          at: ~/
      - prepare-aws-cli-profile:
          installaws: "yes"
      - run:
          name: Install dependencies
          command: |
            # Your code here
            sudo pip install ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            mkdir ".circleci/ansible/roles/configure-server/files/"
            cp backend/package.json ".circleci/ansible/roles/configure-server/files/"
            
            inventory=".circleci/ansible/inventory.txt"
            playbook=".circleci/ansible/configure-server.yml"

            ansible-playbook -i $inventory $playbook
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          isEmpty: "yes"     

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:12.22.1
    steps:
      # Checkout code from git
      - checkout
      - prepare-aws-cli-profile:
          installaws: "yes"
      - restore_cache:
          keys:
            - "backend-build"           
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            for output in $(npm run migrations); do
              echo $output >> migrations.log 
            done 
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            cat  migrations.log 
            if ( grep -F "successfully"  migrations.log ); then
              curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "1"  "https://api.memstash.io/values/migrations_${CIRCLE_WORKFLOW_ID}"
            else 
              curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "0"  "https://api.memstash.io/values/migrations_${CIRCLE_WORKFLOW_ID}"
            fi
      - persist_to_workspace:
          root: ~/
          paths: ["project/backend/dist"]

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          isEmpty: "yes"

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI 
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          key: frontend-build       
      - run:
            name: Install dependencies
            command: |
              # your code here
              cd frontend
              npm audit fix --audit-level=critical
      - prepare-aws-cli-profile:
          installaws: "yes"
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            inventory=".circleci/ansible/inventory.txt"
            BACKEND_DNSNAME=$(grep -E ".com$" $inventory)           
            export API_URL="http://${BACKEND_DNSNAME}:3030"
            cd frontend
            echo "API_URL=${API_URL}" > .env 
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm run build
            
            aws s3 cp dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      # Here's where you will add some code to rollback on failure     
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          isEmpty: "no"

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python:latest
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["4d:0b:29:64:e7:f8:19:f7:0a:76:80:38:8a:fe:be:b6"]
      # attach workspace
      - attach_workspace:
          at: ~/    
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo pip install ansible
      - prepare-aws-cli-profile: # will be required to destroy-environment ON_FAIL
          installaws: "yes" 
      - run:
          name: Deploy backend
          command: |
            # your code here
            mkdir ".circleci/ansible/roles/deploy/files/"
            
            cd backend
            tar -c -zf artifacts.tar.gzip ./dist
            cp -f ./artifacts.tar.gzip "../.circleci/ansible/roles/deploy/files/"
            
            inventory="../.circleci/ansible/inventory.txt"
            playbook="../.circleci/ansible/deploy-backend.yml"

            ansible-playbook -i $inventory $playbook
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          isEmpty: "no"

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: amazon/aws-cli
    steps:
      # Checkout code from git-
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip 
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            # Get backend IP
            inventory=".circleci/ansible/inventory.txt"
            BACKEND_DNSNAME=$( grep -E ".com$" $inventory )
            BACKEND_URL="http://${BACKEND_DNSNAME}:3030/api/status"

            echo $BACKEND_URL

            # Test backend availability
            if ( curl -s ${BACKEND_URL} | grep "ok" ); then 
              exit 0
            else 
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
            if ( curl -s ${URL} | grep "Welcome" ); then 
              exit 0
            else 
              exit 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          isEmpty: "no"
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text)
            
            # Save old workflow id to use later
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --data "${OldWorkflowID}" --request PUT "https://api.memstash.io/values/OLDWORKFLOWID"
              
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # remove old cloudfront
              aws cloudformation delete-stack --stack-name "udapeople-cloudfront-${OldWorkflowID}"
            fi

            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID}" --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" --tags project=CapStone03
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          isEmpty: "no"
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: ["OldWorkflowIDs"]            
      - run:
          name: Remove old stacks and files
          command: |
            # retrieve old workflow id from memstash.io
            export OldWorkflowID=$(curl -H "token:${MEMSTASH_TOKEN}" --request GET "https://api.memstash.io/values/OLDWORKFLOWID" )

            echo "Old Workflow Id: ${OldWorkflowID}"

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # check if any bucket name with substring oldworkflow id, then remove
              if [[ "$(aws s3 ls)" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm s3://"udapeople-${OldWorkflowID}" --recursive
              fi
              aws cloudformation delete-stack --stack-name "udapeople-bend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-fend-${OldWorkflowID}"
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [capstone3]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]